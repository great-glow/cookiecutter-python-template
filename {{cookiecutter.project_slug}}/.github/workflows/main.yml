{% raw -%}
name: Main

on: [push]

jobs:
  check-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
{%- endraw %}
        python-version: {{cookiecutter.python_version}}
{%- raw %}

    - name: Set up environment
      run: |
        python -m pip install --upgrade pip
        pip install -U poetry

    - name: Install dependencies
      run: |
        poetry install

    - name: Reformat files
      run: |
        make reformat-files

    - name: Check code style
      run: |
        make check-code-style

    - name: Run tests
      run: |
        make test-report

    - if: always()
      name: Upload pytest report
      uses: actions/upload-artifact@v1
      with:
        name: pytest report
        path: report.html

    - name: Check fixtures
      run: |
        make check-fixtures

    - name: Config git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit and push changes
      if: startsWith(github.ref, 'refs/tags/') == false
      run: |
        git commit -a -m "Reformat files" || true
        git push
{%- endraw %}
{%- if cookiecutter.upload_badge_to_minio_host == 'y' %}
{%- raw %}

    - name: Upload badge
      if: github.ref == 'refs/heads/develop'
      run: |
        make badge
      env:
        MINIO_HOST: ${{ secrets.MINIO_HOST }}
        MINIO_KEY: ${{ secrets.MINIO_KEY }}
        MINIO_SECRET: ${{ secrets.MINIO_SECRET }}
{%- endraw %}
{%- endif %}
{%- raw %}

  build-and-publish-head:
    runs-on: ubuntu-latest
    needs: check-and-test
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v2

    - name: Build and Publish head Docker image
      uses: VaultVulp/gp-docker-action@1.1.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
{%- endraw %}
        image-name: {{cookiecutter.project_slug}}
{%- raw %}
        image-tag: head

  build-and-publish-latest:
    runs-on: ubuntu-latest
    needs: check-and-test
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v2

    - name: Build and Publish latest Docker image
      uses: VaultVulp/gp-docker-action@1.1.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
{%- endraw %}
        image-name: {{cookiecutter.project_slug}}
{%- raw %}

  build-and-publish-tag:
    runs-on: ubuntu-latest
    needs: check-and-test
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v2

    - name: Build and Publish Tag Docker image
      uses: VaultVulp/gp-docker-action@1.1.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
{%- endraw %}
        image-name: {{cookiecutter.project_slug}}
{%- raw %}
        extract-git-tag: true
{%- endraw %}
{%- if cookiecutter.enable_auto_deploy == 'y' %}
{%- raw %}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-publish-tag
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v2

    - name: Deploy nomad job
      run: |
        wget https://releases.hashicorp.com/nomad/0.10.2/nomad_0.10.2_linux_amd64.zip
        sudo unzip nomad_0.10.2_linux_amd64.zip -d /usr/local/bin
{%- endraw %}
        export DOCKER_IMAGE=${GITHUB_REPOSITORY,,}/{{cookiecutter.project_slug}}
{%- raw %}
        export DOCKER_TAG=$(echo ${GITHUB_REF} | sed -e "s/refs\/tags\///g")
        envsubst < "./.nomad/template-deploy.nomad" > "./.nomad/deploy.nomad"
        nomad job run ./.nomad/deploy.nomad
      env:
        NOMAD_ADDR: ${{ secrets.NOMAD_ADDR }}
        NOMAD_TOKEN: ${{ secrets.NOMAD_TOKEN }}
        VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
        VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
        VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        LOKI_USERNAME: ${{ secrets.LOKI_USERNAME }}
        LOKI_PASSWORD: ${{ secrets.LOKI_PASSWORD }}
        LOKI_HOST: ${{ secrets.LOKI_HOST }}

    - name: Inform failure
      if: failure()
      uses: cstuder/apprise-ga@v2.0.0
      with:
{%- endraw %}
        args: '"CI/CD" "ðŸŸ§: failed to publish a new release of {{cookiecutter.project_name}}."'
{%- raw %}
      env:
        APPRISE_URL: "tgram://${{ secrets.APPRISE_TELEGRAM_TOKEN }}/${{ secrets.APPRISE_CHAT_ID }}/"

    - name: Inform success
      uses: cstuder/apprise-ga@v2.0.0
      with:
{%- endraw %}
        args: '"CI/CD" "ðŸŸ©: successfully published a new release of {{cookiecutter.project_name}}."'
{%- raw %}
      env:
        APPRISE_URL: "tgram://${{ secrets.APPRISE_TELEGRAM_TOKEN }}/${{ secrets.APPRISE_CHAT_ID }}/"
{%- endraw %}
{%- endif %}
